llm_vision_describe_scene:
  alias: LLM Vision Describe Scene
  description: 'LLM Vision: Describe the Camera Feed in Sentence'
  fields:
    prompt:
      selector:
        text:
      name: prompt
      required: true
      default: "\"Summarize what's happening in the camera feed (one sentence max).\n
        Don't describe the scene! If there is a person, describe what they're\n doing
        and what they look like. If they look like a courier mention that!\n If nothing
        is happening, say so.\"\n"
  sequence:
  - variables:
      llv_response: undefined
  - action: llmvision.image_analyzer
    metadata: {}
    data:
      include_filename: false
      target_width: 800
      detail: low
      max_tokens: 100
      temperature: 0.5
      provider: 01JDVNFP4KWD6XERDGQ5V3TY6W
      message: '{{ prompt }}'
      remember: false
      expose_images: false
      image_file: /media/{{ states( 'input_text.url_llv')  }}
    response_variable: llv_response
  - action: input_text.set_value
    metadata: {}
    data:
      value: '{{ llv_response }}'
    target:
      entity_id: input_text.llm_response
  icon: mdi:camera
llm_car_in_driveway:
  alias: LLM Car in Driveway
  sequence:
  - data:
      max_tokens: 100
      image_entity:
      - camera.carport
      provider: 01J99F4T99PA1XGQ4CTQS3CP8H
      model: gpt-4o
      target_width: 512
      temperature: 0.5
      detail: low
      include_filename: false
      message: Please check if there is a car in the driveway with the license plate
        "<your_license_plate_number>" and respond with a JSON object. The JSON object
        should have a single key, "car_in_driveway," which should be set to true if
        - and only  if - there is a car with the license number provided above in
        the  driveway and false otherwise.
    response_variable: response
    action: llmvision.image_analyzer
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ (( response.response_text |regex_replace(find=''```json

          '', replace='''', ignorecase=False) |regex_replace(find=''

          ```'', replace='''', ignorecase=False)  ) | from_json).car_in_driveway }}'
        enabled: true
      sequence:
      - target:
          entity_id: input_boolean.car_in_driveway
        data: {}
        action: input_boolean.turn_on
    default:
    - target:
        entity_id: input_boolean.car_in_driveway
      data: {}
      action: input_boolean.turn_off
    enabled: true
  mode: single
  description: ''
llv_prompt_test:
  alias: LLV Prompt Test
  fields:
    prompt:
      selector:
        text:
      name: prompt
      required: true
  sequence:
  - metadata: {}
    data:
      max_tokens: 100
      model: gpt-4o
      provider: 01J99F4T99PA1XGQ4CTQS3CP8H
      target_width: 1280
      include_filename: false
      image_entity:
      - camera.front_door
      - camera.garage
      message: '{{ prompt }}'
    response_variable: response
    action: llmvision.image_analyzer
  - metadata: {}
    data:
      cache: true
      media_player_entity_id: media_player.entity_id
      message: '{{response.response_text}}'
    target:
      entity_id: tts.piper
    action: tts.speak
  description: ''
bring_clothes_in_when_it_rains:
  alias: Bring Clothes in when it rains
  sequence:
  - action: llmvision.image_analyzer
    metadata: {}
    data:
      remember: false
      include_filename: false
      detail: low
      max_tokens: 100
      expose_images: false
      temperature: 0.5
      message: Reply with a simple number, how many pictures of artwork are hanging
        on the wall?
      image_entity:
      - camera.camera_1_q5_profile1
      model: gemini-1.5-flash
      target_width: 512
  - if:
    - condition: template
      value_template: '"{{ gemini.response_text | int > 1 }}"'
    then:
    - action: persistent_notification.create
      metadata: {}
      data:
        message: 'The clothing items were counted.  COUNT: {{ gemini.response_text
          | int }}'
  description: ddd
  icon: mdi:weather-lightning-rainy
llv_numeric_question:
  alias: LLV Numeric Question
  sequence:
  - variables:
      camera_image_file: undefined
      test_count: 0
  - action: script.camera_snapshot_and_upload
    metadata: {}
    data:
      capture_camera_stream:
        entity_id: '{{capture_camera_stream.entity_id }}'
      capture_mime_type: image/png
    response_variable: camera_image_file
  - action: llmvision.data_analyzer
    metadata: {}
    data:
      message: '{{ questions_prompt }}'
      include_filename: false
      target_width: 1280
      detail: high
      max_tokens: 5
      temperature: 0.1
      provider: 01JDVNFP4KWD6XERDGQ5V3TY6W
      sensor_entity: '{{ file_path_save_target.entity_id }}'
      image_file: '{{camera_image_file.media_rel }}'
  description: ''
  fields:
    questions_prompt:
      selector:
        text:
      name: Questions Prompt
      default: Can you count the pictures on the wall ?
      required: true
    file_path_save_target:
      selector:
        target:
          entity:
            domain: input_number
      name: File Path Save Target
      required: true
      description: Input text entity to save the file path to
    capture_camera_stream:
      selector:
        target:
          entity:
            domain: camera
      name: Camera Stream
      default:
        entity_id: camera.camera_1_q5_profile1
      required: true
purge_logbook_by_entiity:
  alias: Purge Logbook by Entiity
  sequence:
  - action: recorder.purge_entities
    metadata: {}
    data:
      domains:
      - logbook
      entity_globs: '{{target_entities.entity_id}}'
    enabled: false
  fields:
    target_entities:
      selector:
        target:
      name: Target Entities to purge
      required: true
  description: ''
new_script:
  sequence:
  - variables:
      test_me: '{{state_picker | list}}'
      pre_notification_timer: '{{notification_timer}}'
      my_notification_timer: '{{  ([pre_notification_timer ] if pre_notification_timer
        is string else pre_notification_timer) |list }}'
      inner: '{{ pre_notification_timer[0].entity_id if pre_notification_timer is
        list else pre_notification_timer.entity_id }}'
      pre_controlling_binary_sensor: '{{controlling_binary_sensor}}'
      my_controlling_binary_sensor: '{{ [pre_controlling_binary_sensor] if pre_controlling_binary_sensor
        is  string else pre_controlling_binary_sensor }}'
      controlling_binary_sensor_single: '{{ pre_controlling_binary_sensor[0].entity_id
        if pre_controlling_binary_sensor is list else pre_controlling_binary_sensor.entity_id
        }}'
  fields:
    title:
      selector:
        text:
      required: true
      name: Title
    label_id:
      selector:
        text:
      required: true
      name: Label ID
    notification_timer:
      selector:
        target:
          entity:
            domain:
            - timer
      name: Notification Timer
      required: true
    controlling_binary_sensor:
      selector:
        target:
          entity:
            domain:
            - binary_sensor
            - input_boolean
      name: Controlling Binary Sensor
      required: true
    event_name:
      selector:
        text:
      name: Event Name
      description: ACK_WARN_IRREGULAR_OFF
      required: true
      default: ACK_WARN_IRREGULAR_OFF
    alert_type:
      selector:
        select:
          options:
          - INFO
          - WARNING
          - CRITICAL
      name: Alert Type
      default: INFO
api_adapter_notification_dispatcher:
  sequence:
  - alias: Set up variables
    variables:
      target_notification_channel: '{{notification_channel_list.split('','') }}'
      notification_channel_count: '{{target_notification_channel |  list | count }}'
      action_callback: '{{callback}}'
    enabled: false
  - action: script.notification_dispatcher_ui
    metadata: {}
    data:
      message: '{{message}}'
      notification_channel:
      - persistant
      - alexa
      alexa_sound: amzn_sfx_doorbell_01
  mode: restart
  alias: API Adapter Notification Dispatcher
  description: ''
  fields: {}
alexa_test_service:
  sequence:
  - action: script.custom_alexa_notification
    metadata: {}
    data:
      target_alexa_speaker:
        entity_id: media_player.alexa_s_baby
      message: 'No message set. '
      volume: Normal Volume
      sound: buzzers_pistols_01
  alias: Alexa Test Service
  description: ''
test_response:
  sequence:
  - variables:
      value: '{{number_to_add | int }}'
      test_response_var:
        value_plus_five: '{{  value + 5}}

          '
      value_plus_five: '{{  value |int + 5 }}

        '
  - sequence: []
  - action: logbook.log
    metadata: {}
    data:
      name: script.test_response
      message: '{{ test_response_var | to_json}}'
  - stop: '''returning value + 5'''
    response_variable: test_response_var
  alias: Test Response
  description: ''
  fields:
    testvalue:
      selector:
        text:
      name: testvalue
      default: this is the default
    number_to_add:
      selector:
        number:
          min: 1
          max: 100
      name: number to add
      default: 37
      required: true
test_parent_resp:
  sequence:
  - variables:
      result: not set yet!
  - action: script.test_response
    data:
      testvalue: i am a value
      number_to_add: 40
    response_variable: result
  - action: logbook.log
    metadata: {}
    data:
      name: LogBook test response
      message: RESULT MER {{result}}///
  alias: Test Parent Resp
  description: ''
