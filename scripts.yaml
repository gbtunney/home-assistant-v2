llm_vision_describe_scene:
  alias: LLM Vision Describe Scene
  description: "LLM Vision: Describe the Camera Feed in Sentence"
  fields:
    prompt:
      selector:
        text:
      name: prompt
      required: true
      default:
        "\"Summarize what's happening in the camera feed (one sentence max).\n
        Don't describe the scene! If there is a person, describe what they're\n doing
        and what they look like. If they look like a courier mention that!\n If nothing
        is happening, say so.\"\n"
  sequence:
    - variables:
        llv_response: undefined
    - action: llmvision.image_analyzer
      metadata: {}
      data:
        include_filename: false
        target_width: 800
        detail: low
        max_tokens: 100
        temperature: 0.5
        provider: 01JDVNFP4KWD6XERDGQ5V3TY6W
        message: "{{ prompt }}"
        remember: false
        expose_images: false
        image_file: /media/{{ states( 'input_text.url_llv')  }}
      response_variable: llv_response
    - action: input_text.set_value
      metadata: {}
      data:
        value: "{{ llv_response }}"
      target:
        entity_id: input_text.llm_response
  icon: mdi:camera
llm_car_in_driveway:
  alias: LLM Car in Driveway
  sequence:
    - data:
        max_tokens: 100
        image_entity:
          - camera.carport
        provider: 01J99F4T99PA1XGQ4CTQS3CP8H
        model: gpt-4o
        target_width: 512
        temperature: 0.5
        detail: low
        include_filename: false
        message:
          Please check if there is a car in the driveway with the license plate
          "<your_license_plate_number>" and respond with a JSON object. The JSON object
          should have a single key, "car_in_driveway," which should be set to true if
          - and only  if - there is a car with the license number provided above in
          the  driveway and false otherwise.
      response_variable: response
      action: llmvision.image_analyzer
    - choose:
        - conditions:
            - condition: template
              value_template:
                "{{ (( response.response_text |regex_replace(find='```json

                ', replace='', ignorecase=False) |regex_replace(find='

                ```', replace='', ignorecase=False)  ) | from_json).car_in_driveway }}"
              enabled: true
          sequence:
            - target:
                entity_id: input_boolean.car_in_driveway
              data: {}
              action: input_boolean.turn_on
      default:
        - target:
            entity_id: input_boolean.car_in_driveway
          data: {}
          action: input_boolean.turn_off
      enabled: true
  mode: single
  description: ""
llv_prompt_test:
  alias: LLV Prompt Test
  fields:
    prompt:
      selector:
        text:
      name: prompt
      required: true
  sequence:
    - metadata: {}
      data:
        max_tokens: 100
        model: gpt-4o
        provider: 01J99F4T99PA1XGQ4CTQS3CP8H
        target_width: 1280
        include_filename: false
        image_entity:
          - camera.front_door
          - camera.garage
        message: "{{ prompt }}"
      response_variable: response
      action: llmvision.image_analyzer
    - metadata: {}
      data:
        cache: true
        media_player_entity_id: media_player.entity_id
        message: "{{response.response_text}}"
      target:
        entity_id: tts.piper
      action: tts.speak
  description: ""
bring_clothes_in_when_it_rains:
  alias: Bring Clothes in when it rains
  sequence:
    - action: llmvision.image_analyzer
      metadata: {}
      data:
        remember: false
        include_filename: false
        detail: low
        max_tokens: 100
        expose_images: false
        temperature: 0.5
        message:
          Reply with a simple number, how many pictures of artwork are hanging
          on the wall?
        image_entity:
          - camera.camera_1_q5_profile1
        model: gemini-1.5-flash
        target_width: 512
    - if:
        - condition: template
          value_template: '"{{ gemini.response_text | int > 1 }}"'
      then:
        - action: persistent_notification.create
          metadata: {}
          data:
            message:
              "The clothing items were counted.  COUNT: {{ gemini.response_text
              | int }}"
  description: ddd
  icon: mdi:weather-lightning-rainy
llv_numeric_question:
  alias: LLV Numeric Question
  sequence:
    - variables:
        camera_image_file: undefined
        test_count: 0
    - action: script.camera_snapshot_and_upload
      metadata: {}
      data:
        capture_camera_stream:
          entity_id: "{{capture_camera_stream.entity_id }}"
        capture_mime_type: image/png
      response_variable: camera_image_file
    - action: llmvision.data_analyzer
      metadata: {}
      data:
        message: "{{ questions_prompt }}"
        include_filename: false
        target_width: 1280
        detail: high
        max_tokens: 5
        temperature: 0.1
        provider: 01JDVNFP4KWD6XERDGQ5V3TY6W
        sensor_entity: "{{ file_path_save_target.entity_id }}"
        image_file: "{{camera_image_file.media_rel }}"
  description: ""
  fields:
    questions_prompt:
      selector:
        text:
      name: Questions Prompt
      default: Can you count the pictures on the wall ?
      required: true
    file_path_save_target:
      selector:
        target:
          entity:
            domain: input_number
      name: File Path Save Target
      required: true
      description: Input text entity to save the file path to
    capture_camera_stream:
      selector:
        target:
          entity:
            domain: camera
      name: Camera Stream
      default:
        entity_id: camera.camera_1_q5_profile1
      required: true
turn_switch_off_for_delay:
  alias: Turn Switch off for Delay
  sequence:
    - variables:
        inverted_state: '{% if initial_state == "ON" %}OFF{% else %}ON{% endif %}'
    - action: switch.turn_{{ initial_state | lower }}
      metadata: {}
      data: {}
      target:
        entity_id: "{{ target_switch.entity_id }}

          "
    - delay:
        hours: 0
        minutes: "{{ delay_minutes|int }}"
        seconds: 0
        milliseconds: 0
    - action: switch.turn_{{ inverted_state | lower }}
      metadata: {}
      data: {}
      target:
        entity_id: "{{ target_switch.entity_id }}

          "
  description: ""
  fields:
    target_switch:
      selector:
        target:
          entity:
            domain: switch
      name: Target Switch
      required: true
    delay_minutes:
      selector:
        number:
          min: 1
          max: 238
      name: Delay Minutes
      default: 10
      required: true
    initial_state:
      selector:
        select:
          options:
            - "ON"
            - "OFF"
      required: true
      name: Initial State
      default: "ON"
aquarium_selector:
  alias: Aquarium Selector
  sequence:
    - variables:
        lookup:
          120g: switch.120g_pumps_heaters
          55g: switch.55g_pumps_heaters
          10g Male: switch.10g_m_pumps_heaters
          20g Long: switch.20g_pumps_heaters
          10g Upper: switch.20g_pumps_heaters
          Quarantine: switch.20g_pumps_heaters
        co2_list:
          - 10g Male
          - 20g Long
          - 10g Upper
          - Quarantine
      alias: CONST ENUM VARIABLES
    - variables:
        aq_list: state_attr('input_select.aquarium','options')
        selected_value: "{{aquarium_picker}}"
        selected_entity: "{{lookup[selected_value]}}"
        do_notification:
          "{{ bool( end_notification_timer is defined , false )  and
          bool(( end_notification_timer | int(999)  < delay_minutes | int(999) ),false)
          }}"
        first_delay:
          "{% if do_notification %}{{ ( delay_minutes | int(999) - end_notification_timer|int(999)
          )| int(999) }}{% else %}{{ delay_minutes | int(999) }} {% endif %}"
        second_delay:
          "{% if do_notification %}{{  end_notification_timer|int(999) }}{%
          else %}{{ 0 | int(999) }} {% endif %}"
        do_co2: "{{ bool(selected_value in co2_list ,false) }}"
    - action: script.set_state_switch_light
      metadata: {}
      data:
        select_state: "Off"
        bool_invert_state: "Off"
        target_entity_set:
          entity_id: "{{selected_entity}}"
      alias: Turn off pumps
      enabled: true
    - alias: Turn off C02 if needed
      if:
        - condition: template
          value_template:
            "{{ bool( do_co2 ,false) and bool(states('binary_sensor.aquarium_co2_schedule',false
            ))  }}"
      then:
        - action: script.set_state_switch_light
          metadata: {}
          data:
            bool_invert_state: "Off"
            select_state: "Off"
            target_entity_set:
              entity_id: switch.20g_rack_co2
    - delay:
        hours: 0
        minutes: "{{ first_delay |int }}"
        seconds: 0
        milliseconds: 0
      alias: first delay
      enabled: true
    - alias: if do notification
      if:
        - condition: template
          value_template: "{{ bool(do_notification ,false)}}"
      then:
        - action: script.notification_dispatcher
          metadata: {}
          data:
            message:
              '"{{ second_delay |int(999) }} minute warning! Pumps/Heaters in {{
              selected_value  }} have been off for {{ first_delay |int(999) }} and will
              be turning back on in {{second_delay |int(999) }} minutes!!"

              '
            notification_channel:
              - alexa
            bool_critical: "OFF"
            sound: default
            sms_targets:
              - 7188138156@mms.att.net
            email_targets:
              - gbtunney@mac.com
          enabled: true
    - delay:
        hours: 0
        minutes: "{{ second_delay|int }}"
        seconds: 0
        milliseconds: 0
      alias: second delay
      enabled: true
    - action: script.set_state_switch_light
      metadata: {}
      data:
        select_state: "On"
        bool_invert_state: "Off"
        target_entity_set:
          entity_id: "{{selected_entity}}"
      alias: Turn ON pumps
      enabled: true
    - alias: Turn ON C02 if needed and  if scheduled
      if:
        - condition: template
          value_template:
            "{{ bool(do_co2 ,false) and bool(states('binary_sensor.aquarium_co2_schedule',false
            )) }}"
      then:
        - alias: Turn on CO2 if scheduled
          action: script.set_state_switch_light
          metadata: {}
          data:
            bool_invert_state: "Off"
            select_state: "Off"
            target_entity_set:
              entity_id: switch.20g_rack_co2
            entity_trigger:
              entity_id: binary_sensor.aquarium_co2_schedule
  description: ""
  fields:
    aquarium_picker:
      selector:
        select:
          options:
            - 120g
            - 55g
            - 10g Male
            - 20g Long
            - 10g Upper
            - Quarantine
      required: true
      name: Aquarium Picker
    delay_minutes:
      selector:
        number:
          min: 15
          max: 243
      name: Delay Minutes
      required: true
      default: 45
    end_notification_timer:
      selector:
        number:
          min: 1
          max: 25
          step: 1
      name: End Notification Timer
      required: false
      default: 5
      description: this cannot be greater than the total time.
    aquarium_clean_notes:
      selector:
        select:
          options:
            - Water Change (Vacuum)
            - Trim Plants
            - Remove algae
            - Deep Clean
            - Clean Filter
            - Quick water Change (no vacuum)
          multiple: true
      name: Aquarium Clean Notes
flash_test:
  alias: Flash Test
  sequence:
    - repeat:
        count: 100
        sequence:
          - action: light.turn_on
            metadata: {}
            data:
              rgb_color:
                - 0
                - 189
                - 27
              brightness_pct: 100
            target:
              entity_id: light.smart_bulb_1
          - delay:
              hours: 0
              minutes: 0
              seconds: 0
              milliseconds: 500
          - action: light.turn_on
            metadata: {}
            data:
              rgb_color:
                - 236
                - 98
                - 61
            target:
              entity_id: light.smart_bulb_1
  description: ""
