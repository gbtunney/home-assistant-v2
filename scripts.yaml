llm_vision_describe_scene:
  alias: LLM Vision Describe Scene
  description: "LLM Vision: Describe the Camera Feed in Sentence"
  fields:
    prompt:
      selector:
        text:
      name: prompt
      required: true
      default:
        "\"Summarize what's happening in the camera feed (one sentence max).\n
        Don't describe the scene! If there is a person, describe what they're\n doing
        and what they look like. If they look like a courier mention that!\n If nothing
        is happening, say so.\"\n"
  sequence:
    - variables:
        llv_response: undefined
    - action: llmvision.image_analyzer
      metadata: {}
      data:
        include_filename: false
        target_width: 800
        detail: low
        max_tokens: 100
        temperature: 0.5
        provider: 01JDVNFP4KWD6XERDGQ5V3TY6W
        message: "{{ prompt }}"
        remember: false
        expose_images: false
        image_file: /media/{{ states( 'input_text.url_llv')  }}
      response_variable: llv_response
    - action: input_text.set_value
      metadata: {}
      data:
        value: "{{ llv_response }}"
      target:
        entity_id: input_text.llm_response
  icon: mdi:camera
llm_car_in_driveway:
  alias: LLM Car in Driveway
  sequence:
    - data:
        max_tokens: 100
        image_entity:
          - camera.carport
        provider: 01J99F4T99PA1XGQ4CTQS3CP8H
        model: gpt-4o
        target_width: 512
        temperature: 0.5
        detail: low
        include_filename: false
        message:
          Please check if there is a car in the driveway with the license plate
          "<your_license_plate_number>" and respond with a JSON object. The JSON object
          should have a single key, "car_in_driveway," which should be set to true if
          - and only  if - there is a car with the license number provided above in
          the  driveway and false otherwise.
      response_variable: response
      action: llmvision.image_analyzer
    - choose:
        - conditions:
            - condition: template
              value_template:
                "{{ (( response.response_text |regex_replace(find='```json

                ', replace='', ignorecase=False) |regex_replace(find='

                ```', replace='', ignorecase=False)  ) | from_json).car_in_driveway }}"
              enabled: true
          sequence:
            - target:
                entity_id: input_boolean.car_in_driveway
              data: {}
              action: input_boolean.turn_on
      default:
        - target:
            entity_id: input_boolean.car_in_driveway
          data: {}
          action: input_boolean.turn_off
      enabled: true
  mode: single
  description: ""
llv_prompt_test:
  alias: LLV Prompt Test
  fields:
    prompt:
      selector:
        text:
      name: prompt
      required: true
  sequence:
    - metadata: {}
      data:
        max_tokens: 100
        model: gpt-4o
        provider: 01J99F4T99PA1XGQ4CTQS3CP8H
        target_width: 1280
        include_filename: false
        image_entity:
          - camera.front_door
          - camera.garage
        message: "{{ prompt }}"
      response_variable: response
      action: llmvision.image_analyzer
    - metadata: {}
      data:
        cache: true
        media_player_entity_id: media_player.entity_id
        message: "{{response.response_text}}"
      target:
        entity_id: tts.piper
      action: tts.speak
  description: ""
bring_clothes_in_when_it_rains:
  alias: Bring Clothes in when it rains
  sequence:
    - action: llmvision.image_analyzer
      metadata: {}
      data:
        remember: false
        include_filename: false
        detail: low
        max_tokens: 100
        expose_images: false
        temperature: 0.5
        message:
          Reply with a simple number, how many pictures of artwork are hanging
          on the wall?
        image_entity:
          - camera.camera_1_q5_profile1
        model: gemini-1.5-flash
        target_width: 512
    - if:
        - condition: template
          value_template: '"{{ gemini.response_text | int > 1 }}"'
      then:
        - action: persistent_notification.create
          metadata: {}
          data:
            message:
              "The clothing items were counted.  COUNT: {{ gemini.response_text
              | int }}"
  description: ddd
  icon: mdi:weather-lightning-rainy
llv_numeric_question:
  alias: LLV Numeric Question
  sequence:
    - variables:
        camera_image_file: undefined
        test_count: 0
    - action: script.camera_snapshot_and_upload
      metadata: {}
      data:
        capture_camera_stream:
          entity_id: "{{capture_camera_stream.entity_id }}"
        capture_mime_type: image/png
      response_variable: camera_image_file
    - action: llmvision.data_analyzer
      metadata: {}
      data:
        message: "{{ questions_prompt }}"
        include_filename: false
        target_width: 1280
        detail: high
        max_tokens: 5
        temperature: 0.1
        provider: 01JDVNFP4KWD6XERDGQ5V3TY6W
        sensor_entity: "{{ file_path_save_target.entity_id }}"
        image_file: "{{camera_image_file.media_rel }}"
  description: ""
  fields:
    questions_prompt:
      selector:
        text:
      name: Questions Prompt
      default: Can you count the pictures on the wall ?
      required: true
    file_path_save_target:
      selector:
        target:
          entity:
            domain: input_number
      name: File Path Save Target
      required: true
      description: Input text entity to save the file path to
    capture_camera_stream:
      selector:
        target:
          entity:
            domain: camera
      name: Camera Stream
      default:
        entity_id: camera.camera_1_q5_profile1
      required: true
rest_test_script:
  alias: Rest Test Script
  sequence:
    - action: switch.turn_on
      metadata: {}
      data: {}
      target:
        entity_id: "{{mytarget.entity_id}}"
  description: ""
  fields:
    mytarget:
      selector:
        target:
          entity:
            domain:
              - switch
      name: my target
testing_alert_confirmable_notification:
  mode: restart
  sequence:
    - alias: Set up variables
      variables:
        action_confirm: "{{ 'CONFIRM_' ~ context.id }}"
        action_dismiss: "{{ 'DISMISS_' ~ context.id }}"
    - action: script.alexa_notification
      metadata: {}
      data:
        target_alexa_speaker:
          entity_id: media_player.alexa_s_baby
        message: "{{message |default(message) }}"
        volume: Normal Volume
        sound: christmas_05
      enabled: true
    - alias: Send notification
      domain: mobile_app
      type: notify
      device_id: 2edd307c906117471b35b8951c10e6a1
      title: ""
      message: this is a message
      data:
        actions:
          - action: "{{ action_confirm }}"
            title: Confirm
          - action: "{{ action_dismiss }}"
            title: Dismiss
      enabled: false
    - alias: Awaiting response
      wait_for_trigger:
        - trigger: event
          event_type: mobile_app_notification_action
          event_data:
            action: "{{ action_confirm }}"
        - trigger: event
          event_type: mobile_app_notification_action
          event_data:
            action: "{{ action_dismiss }}"
      enabled: false
    - choose:
        - conditions:
            - condition: template
              value_template: "{{ wait.trigger.event.data.action == action_confirm }}"
          sequence:
            - if:
                - condition: template
                  value_template: "{{ bool( target_entity is defined , false ) }}"
              then:
                - action: script.clean_labels
                  metadata: {}
                  data:
                    set_labels: "Off"
                    label_id: entity_watch_list
        - conditions:
            - condition: template
              value_template: "{{ wait.trigger.event.data.action == action_dismiss }}"
          sequence: []
      enabled: false
  alias: Testing Alert Confirmable Notification
  description: ""
  fields:
    target_entity:
      selector:
        target:
          entity:
            domain:
              - switch
      name: Target Entity
    inner_message:
      selector:
        text:
      name: message
      default: message from fields
purge_logbook_by_entiity:
  alias: Purge Logbook by Entiity
  sequence:
    - action: recorder.purge_entities
      metadata: {}
      data:
        domains:
          - logbook
        entity_globs: "{{target_entities.entity_id}}"
      enabled: false
  fields:
    target_entities:
      selector:
        target:
      name: Target Entities to purge
      required: true
  description: ""
new_script:
  sequence:
    - variables:
        test_me: "{{state_picker | list}}"
  fields:
    label_id:
      selector:
        text:
      required: true
      name: Label ID
    unique_id:
      selector:
        text:
      required: true
      name: Unique ID
    state_picker:
      selector:
        select:
          multiple: true
          options:
            - "on"
            - "off"
            - unavailable
            - unknown
      required: true
      name: State Picker
    field:
      selector:
        state:
          entity_id: switch.10g_m_pumps_heaters
