#####
# Alert & Notifications Package: Stuff
#####
automation:
  - alias: "Alert: acknowledge irregular_off"
    description: ""
    triggers:
      - event_type: mobile_app_notification_action
        trigger: event
        event_data: {}
    conditions:
      - condition: template
        value_template: >-
          {{ trigger.event.data.action is defined and trigger.event.data.action in
          action_mapping  }}
    actions:
      - variables:
          resolved:
            alert: "{{ action_mapping[trigger.event.data.action].alert }}"
            controlling_binary_sensor: >-
              {{ action_mapping[trigger.event.data.action].controlling_binary_sensor
              }}
      - action: logbook.log
        data:
          name: Alert Acknowledged
          message: >-
            Alert: {{state_attr('resolved.alert','friendly_name')}} has been
            acknowledged, Controlling sensor state:
            {{states(resolved.controlling_binary_sensor)}}
          entity_id: "{{resolved.alert}}"
      - if:
          - condition: template
            value_template: >-
              {{bool( is_state( resolved.controlling_binary_sensor ,['on']),false
              )}}
        then:
          - action: alert.turn_off
            target:
              entity_id: "{{ resolved.controlling_binary_sensor }}"
            metadata: {}
            data: {}
    mode: single
    variables:
      action_mapping:
        ACK_WARN_IRREGULAR_OFF:
          alert: alert.warn_irregular_off
          controlling_binary_sensor: binary_sensor.alert_state_warn_irregular_off

input_boolean:
  alert_enabled_warn_irregular_off:
    name: "Alert Enabled: Warning - Irregular Off"
    # description: "used to supress warnings during clean event"
    icon: mdi:alert

template:
  #- use_blueprint:
  #    path: "label_list_binary_sensor.yaml"
  #   input:
  #    label_id: entity_list_aquarium_group_switch
  #    name: "Test Blueprint Alert"
  # unique_id: "gbt_alert_test_blueprintreal"
  #  state_picker: ["off"]

  - binary_sensor:
      - name: "Alert State: Warning - Irregular Off"
        unique_id: "alert_state_warn_irregular_off"
        state: |
          {%- set my_enabled = bool(is_state( "input_boolean.alert_enabled_warn_irregular_off",'on') ,false) %}
          {%- set my_label = "entity_list_aquarium_group_switch" %}
          {%- set label_list = label_entities(my_label) | select('is_state', 'off') | list  %}    
          {%- set label_count = label_list | count %}
          {{- bool( bool(my_enabled,false) and  bool( label_count | int > 0 ,false) ,false) }}

  #TODO: fix timestamps
alert:
  warn_irregular_off:
    name: "Alert Integration: Warning - Irregular Off" #name of the alert entity
    entity_id: binary_sensor.alert_state_warn_irregular_off
    state: "on"
    repeat: 3
    can_acknowledge: true
    skip_first: true
    title: "Warning - Devices are in an unexpected off state"
    notifiers:
      - api_dispatch_notification
      #- persistent_notification
      # - func_dispatch_notification
    done_message: "clear-notification"
    #done_message: "Aquarium  Alert RESOLVED"
    data:
      # tag: "ACK_WARN_IRREGULAR_OFF" # required for iOS notification replacement
      target: "iPhone,iPad,alexa,persistant"
      title: "ACK_WARN_IRREGULAR_OFF"
      actions:
        - action: "ACK_WARN_IRREGULAR_OFF" #to trigger our automation
          title: "Acknowledge Alert (snooze)" #notification but

    message: |
      {%- set my_label = "entity_list_aquarium_group_switch" %}
      {%- set controlling_binary_sensor = 'binary_sensor.alert_state_warn_irregular_off' %}
      Garage Door open for {{ relative_time(states[controlling_binary_sensor].last_changed) }} \ 
      {%- set label_list = label_entities(my_label) | select('is_state', 'off') |list %}    
      {%- for entity_id in label_list -%}
        {%- set entity_name = state_attr(entity_id,"friendly_name") %}
        {%- set entity_area_name = area_name(entity_id)  %}
        Entity {{entity_name}} in Area: {{entity_area_name }} \
      {%- endfor %}
      Triggered: {{ as_timestamp(states[controlling_binary_sensor].last_changed) | timestamp_custom('%I:%M%p, %A %B %d') }}
